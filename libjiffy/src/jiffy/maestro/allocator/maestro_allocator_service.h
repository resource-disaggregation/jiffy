/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef maestro_allocator_service_H
#define maestro_allocator_service_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "maestro_allocator_service_types.h"

namespace jiffy { namespace maestro {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class maestro_allocator_serviceIf {
 public:
  virtual ~maestro_allocator_serviceIf() {}
  virtual void allocate(std::vector<block> & _return, const std::string& tenantID, const int64_t numBlocks) = 0;
  virtual void deallocate(const std::string& tenentID, const std::vector<block> & blocks) = 0;
};

class maestro_allocator_serviceIfFactory {
 public:
  typedef maestro_allocator_serviceIf Handler;

  virtual ~maestro_allocator_serviceIfFactory() {}

  virtual maestro_allocator_serviceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(maestro_allocator_serviceIf* /* handler */) = 0;
};

class maestro_allocator_serviceIfSingletonFactory : virtual public maestro_allocator_serviceIfFactory {
 public:
  maestro_allocator_serviceIfSingletonFactory(const ::std::shared_ptr<maestro_allocator_serviceIf>& iface) : iface_(iface) {}
  virtual ~maestro_allocator_serviceIfSingletonFactory() {}

  virtual maestro_allocator_serviceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(maestro_allocator_serviceIf* /* handler */) {}

 protected:
  ::std::shared_ptr<maestro_allocator_serviceIf> iface_;
};

class maestro_allocator_serviceNull : virtual public maestro_allocator_serviceIf {
 public:
  virtual ~maestro_allocator_serviceNull() {}
  void allocate(std::vector<block> & /* _return */, const std::string& /* tenantID */, const int64_t /* numBlocks */) {
    return;
  }
  void deallocate(const std::string& /* tenentID */, const std::vector<block> & /* blocks */) {
    return;
  }
};

typedef struct _maestro_allocator_service_allocate_args__isset {
  _maestro_allocator_service_allocate_args__isset() : tenantID(false), numBlocks(false) {}
  bool tenantID :1;
  bool numBlocks :1;
} _maestro_allocator_service_allocate_args__isset;

class maestro_allocator_service_allocate_args {
 public:

  maestro_allocator_service_allocate_args(const maestro_allocator_service_allocate_args&);
  maestro_allocator_service_allocate_args& operator=(const maestro_allocator_service_allocate_args&);
  maestro_allocator_service_allocate_args() : tenantID(), numBlocks(0) {
  }

  virtual ~maestro_allocator_service_allocate_args() noexcept;
  std::string tenantID;
  int64_t numBlocks;

  _maestro_allocator_service_allocate_args__isset __isset;

  void __set_tenantID(const std::string& val);

  void __set_numBlocks(const int64_t val);

  bool operator == (const maestro_allocator_service_allocate_args & rhs) const
  {
    if (!(tenantID == rhs.tenantID))
      return false;
    if (!(numBlocks == rhs.numBlocks))
      return false;
    return true;
  }
  bool operator != (const maestro_allocator_service_allocate_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const maestro_allocator_service_allocate_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class maestro_allocator_service_allocate_pargs {
 public:


  virtual ~maestro_allocator_service_allocate_pargs() noexcept;
  const std::string* tenantID;
  const int64_t* numBlocks;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _maestro_allocator_service_allocate_result__isset {
  _maestro_allocator_service_allocate_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _maestro_allocator_service_allocate_result__isset;

class maestro_allocator_service_allocate_result {
 public:

  maestro_allocator_service_allocate_result(const maestro_allocator_service_allocate_result&);
  maestro_allocator_service_allocate_result& operator=(const maestro_allocator_service_allocate_result&);
  maestro_allocator_service_allocate_result() {
  }

  virtual ~maestro_allocator_service_allocate_result() noexcept;
  std::vector<block>  success;
  maestro_allocator_service_exception ex;

  _maestro_allocator_service_allocate_result__isset __isset;

  void __set_success(const std::vector<block> & val);

  void __set_ex(const maestro_allocator_service_exception& val);

  bool operator == (const maestro_allocator_service_allocate_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const maestro_allocator_service_allocate_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const maestro_allocator_service_allocate_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _maestro_allocator_service_allocate_presult__isset {
  _maestro_allocator_service_allocate_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _maestro_allocator_service_allocate_presult__isset;

class maestro_allocator_service_allocate_presult {
 public:


  virtual ~maestro_allocator_service_allocate_presult() noexcept;
  std::vector<block> * success;
  maestro_allocator_service_exception ex;

  _maestro_allocator_service_allocate_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _maestro_allocator_service_deallocate_args__isset {
  _maestro_allocator_service_deallocate_args__isset() : tenentID(false), blocks(false) {}
  bool tenentID :1;
  bool blocks :1;
} _maestro_allocator_service_deallocate_args__isset;

class maestro_allocator_service_deallocate_args {
 public:

  maestro_allocator_service_deallocate_args(const maestro_allocator_service_deallocate_args&);
  maestro_allocator_service_deallocate_args& operator=(const maestro_allocator_service_deallocate_args&);
  maestro_allocator_service_deallocate_args() : tenentID() {
  }

  virtual ~maestro_allocator_service_deallocate_args() noexcept;
  std::string tenentID;
  std::vector<block>  blocks;

  _maestro_allocator_service_deallocate_args__isset __isset;

  void __set_tenentID(const std::string& val);

  void __set_blocks(const std::vector<block> & val);

  bool operator == (const maestro_allocator_service_deallocate_args & rhs) const
  {
    if (!(tenentID == rhs.tenentID))
      return false;
    if (!(blocks == rhs.blocks))
      return false;
    return true;
  }
  bool operator != (const maestro_allocator_service_deallocate_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const maestro_allocator_service_deallocate_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class maestro_allocator_service_deallocate_pargs {
 public:


  virtual ~maestro_allocator_service_deallocate_pargs() noexcept;
  const std::string* tenentID;
  const std::vector<block> * blocks;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _maestro_allocator_service_deallocate_result__isset {
  _maestro_allocator_service_deallocate_result__isset() : ex(false) {}
  bool ex :1;
} _maestro_allocator_service_deallocate_result__isset;

class maestro_allocator_service_deallocate_result {
 public:

  maestro_allocator_service_deallocate_result(const maestro_allocator_service_deallocate_result&);
  maestro_allocator_service_deallocate_result& operator=(const maestro_allocator_service_deallocate_result&);
  maestro_allocator_service_deallocate_result() {
  }

  virtual ~maestro_allocator_service_deallocate_result() noexcept;
  maestro_allocator_service_exception ex;

  _maestro_allocator_service_deallocate_result__isset __isset;

  void __set_ex(const maestro_allocator_service_exception& val);

  bool operator == (const maestro_allocator_service_deallocate_result & rhs) const
  {
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const maestro_allocator_service_deallocate_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const maestro_allocator_service_deallocate_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _maestro_allocator_service_deallocate_presult__isset {
  _maestro_allocator_service_deallocate_presult__isset() : ex(false) {}
  bool ex :1;
} _maestro_allocator_service_deallocate_presult__isset;

class maestro_allocator_service_deallocate_presult {
 public:


  virtual ~maestro_allocator_service_deallocate_presult() noexcept;
  maestro_allocator_service_exception ex;

  _maestro_allocator_service_deallocate_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

template <class Protocol_>
class maestro_allocator_serviceClientT : virtual public maestro_allocator_serviceIf {
 public:
  maestro_allocator_serviceClientT(std::shared_ptr< Protocol_> prot) {
    setProtocolT(prot);
  }
  maestro_allocator_serviceClientT(std::shared_ptr< Protocol_> iprot, std::shared_ptr< Protocol_> oprot) {
    setProtocolT(iprot,oprot);
  }
 private:
  void setProtocolT(std::shared_ptr< Protocol_> prot) {
  setProtocolT(prot,prot);
  }
  void setProtocolT(std::shared_ptr< Protocol_> iprot, std::shared_ptr< Protocol_> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return this->piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return this->poprot_;
  }
  void allocate(std::vector<block> & _return, const std::string& tenantID, const int64_t numBlocks);
  void send_allocate(const std::string& tenantID, const int64_t numBlocks);
  void recv_allocate(std::vector<block> & _return);
  void deallocate(const std::string& tenentID, const std::vector<block> & blocks);
  void send_deallocate(const std::string& tenentID, const std::vector<block> & blocks);
  void recv_deallocate();
 protected:
  std::shared_ptr< Protocol_> piprot_;
  std::shared_ptr< Protocol_> poprot_;
  Protocol_* iprot_;
  Protocol_* oprot_;
};

typedef maestro_allocator_serviceClientT< ::apache::thrift::protocol::TProtocol> maestro_allocator_serviceClient;

template <class Protocol_>
class maestro_allocator_serviceProcessorT : public ::apache::thrift::TDispatchProcessorT<Protocol_> {
 protected:
  ::std::shared_ptr<maestro_allocator_serviceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
  virtual bool dispatchCallTemplated(Protocol_* iprot, Protocol_* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (maestro_allocator_serviceProcessorT::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef void (maestro_allocator_serviceProcessorT::*SpecializedProcessFunction)(int32_t, Protocol_*, Protocol_*, void*);
  struct ProcessFunctions {
    ProcessFunction generic;
    SpecializedProcessFunction specialized;
    ProcessFunctions(ProcessFunction g, SpecializedProcessFunction s) :
      generic(g),
      specialized(s) {}
    ProcessFunctions() : generic(NULL), specialized(NULL) {}
  };
  typedef std::map<std::string, ProcessFunctions> ProcessMap;
  ProcessMap processMap_;
  void process_allocate(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_allocate(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_deallocate(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deallocate(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
 public:
  maestro_allocator_serviceProcessorT(::std::shared_ptr<maestro_allocator_serviceIf> iface) :
    iface_(iface) {
    processMap_["allocate"] = ProcessFunctions(
      &maestro_allocator_serviceProcessorT::process_allocate,
      &maestro_allocator_serviceProcessorT::process_allocate);
    processMap_["deallocate"] = ProcessFunctions(
      &maestro_allocator_serviceProcessorT::process_deallocate,
      &maestro_allocator_serviceProcessorT::process_deallocate);
  }

  virtual ~maestro_allocator_serviceProcessorT() {}
};

typedef maestro_allocator_serviceProcessorT< ::apache::thrift::protocol::TDummyProtocol > maestro_allocator_serviceProcessor;

template <class Protocol_>
class maestro_allocator_serviceProcessorFactoryT : public ::apache::thrift::TProcessorFactory {
 public:
  maestro_allocator_serviceProcessorFactoryT(const ::std::shared_ptr< maestro_allocator_serviceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::std::shared_ptr< maestro_allocator_serviceIfFactory > handlerFactory_;
};

typedef maestro_allocator_serviceProcessorFactoryT< ::apache::thrift::protocol::TDummyProtocol > maestro_allocator_serviceProcessorFactory;

class maestro_allocator_serviceMultiface : virtual public maestro_allocator_serviceIf {
 public:
  maestro_allocator_serviceMultiface(std::vector<std::shared_ptr<maestro_allocator_serviceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~maestro_allocator_serviceMultiface() {}
 protected:
  std::vector<std::shared_ptr<maestro_allocator_serviceIf> > ifaces_;
  maestro_allocator_serviceMultiface() {}
  void add(::std::shared_ptr<maestro_allocator_serviceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void allocate(std::vector<block> & _return, const std::string& tenantID, const int64_t numBlocks) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->allocate(_return, tenantID, numBlocks);
    }
    ifaces_[i]->allocate(_return, tenantID, numBlocks);
    return;
  }

  void deallocate(const std::string& tenentID, const std::vector<block> & blocks) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->deallocate(tenentID, blocks);
    }
    ifaces_[i]->deallocate(tenentID, blocks);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
template <class Protocol_>
class maestro_allocator_serviceConcurrentClientT : virtual public maestro_allocator_serviceIf {
 public:
  maestro_allocator_serviceConcurrentClientT(std::shared_ptr< Protocol_> prot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocolT(prot);
  }
  maestro_allocator_serviceConcurrentClientT(std::shared_ptr< Protocol_> iprot, std::shared_ptr< Protocol_> oprot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocolT(iprot,oprot);
  }
 private:
  void setProtocolT(std::shared_ptr< Protocol_> prot) {
  setProtocolT(prot,prot);
  }
  void setProtocolT(std::shared_ptr< Protocol_> iprot, std::shared_ptr< Protocol_> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return this->piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return this->poprot_;
  }
  void allocate(std::vector<block> & _return, const std::string& tenantID, const int64_t numBlocks);
  int32_t send_allocate(const std::string& tenantID, const int64_t numBlocks);
  void recv_allocate(std::vector<block> & _return, const int32_t seqid);
  void deallocate(const std::string& tenentID, const std::vector<block> & blocks);
  int32_t send_deallocate(const std::string& tenentID, const std::vector<block> & blocks);
  void recv_deallocate(const int32_t seqid);
 protected:
  std::shared_ptr< Protocol_> piprot_;
  std::shared_ptr< Protocol_> poprot_;
  Protocol_* iprot_;
  Protocol_* oprot_;
  std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

typedef maestro_allocator_serviceConcurrentClientT< ::apache::thrift::protocol::TProtocol> maestro_allocator_serviceConcurrentClient;

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

}} // namespace

#include "maestro_allocator_service.tcc"
#include "maestro_allocator_service_types.tcc"

#endif
