/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef maestro_allocator_service_TYPES_H
#define maestro_allocator_service_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <functional>
#include <memory>


namespace jiffy { namespace maestro {

class maestro_allocator_service_exception;

class block;

typedef struct _maestro_allocator_service_exception__isset {
  _maestro_allocator_service_exception__isset() : msg(false) {}
  bool msg :1;
} _maestro_allocator_service_exception__isset;

class maestro_allocator_service_exception : public ::apache::thrift::TException {
 public:

  maestro_allocator_service_exception(const maestro_allocator_service_exception&);
  maestro_allocator_service_exception& operator=(const maestro_allocator_service_exception&);
  maestro_allocator_service_exception() : msg() {
  }

  virtual ~maestro_allocator_service_exception() noexcept;
  std::string msg;

  _maestro_allocator_service_exception__isset __isset;

  void __set_msg(const std::string& val);

  bool operator == (const maestro_allocator_service_exception & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const maestro_allocator_service_exception &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const maestro_allocator_service_exception & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
  mutable std::string thriftTExceptionMessageHolder_;
  const char* what() const noexcept;
};

void swap(maestro_allocator_service_exception &a, maestro_allocator_service_exception &b);

std::ostream& operator<<(std::ostream& out, const maestro_allocator_service_exception& obj);


class block {
 public:

  block(const block&);
  block& operator=(const block&);
  block() : block_id(), sequence_number(0) {
  }

  virtual ~block() noexcept;
  std::string block_id;
  int64_t sequence_number;

  void __set_block_id(const std::string& val);

  void __set_sequence_number(const int64_t val);

  bool operator == (const block & rhs) const
  {
    if (!(block_id == rhs.block_id))
      return false;
    if (!(sequence_number == rhs.sequence_number))
      return false;
    return true;
  }
  bool operator != (const block &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const block & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(block &a, block &b);

std::ostream& operator<<(std::ostream& out, const block& obj);

}} // namespace

#include "maestro_allocator_service_types.tcc"

#endif
